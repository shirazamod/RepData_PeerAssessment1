write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "1life-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "1life-hp.csv")
warnings()
debugSource('~/Coursera/Playground/HelloPeter.R')
comment <- readComment("http://hellopeter.com/1lifedirect-insurance/compliments/best-customer-service-ever-had-1644229")
source('~/Coursera/Playground/HelloPeter.R')
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
source('~/Coursera/Playground/ombudsman-analysis.R')
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
top.settlements <- top.settlements[1:10,]
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity")
source('~/Coursera/Playground/ombudsman-analysis.R')
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity")
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
View(ombud)
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1,  color="red")))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1,  size=5)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1,  size=3)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1,  size=2)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1,  size=2)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1, size=3)))
ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity") + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1)))
complaint.graph <- ggplot(top.settlements, aes(x=Name, y=Percent.Resolved.in.favour.of.Complainant, fill=Name)) + geom_bar(stat="identity")
complaint.graph <- complaint.graph +  + geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1)))
complaint.graph <- complaint.graph +geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1)))
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=50, size=20, vjust=0.5))
complaint.graph
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=50, size=5))
complaint.graph
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=90, size=15))
complaint.graph
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=180, size=15))
complaint.graph
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=270, size=15))
complaint.graph
View(ombud)
source('~/Coursera/Playground/ombudsman-analysis.R')
complaint.graph
complaint.graph <- complaint.graph +geom_line((aes(x=Name, y=Cases.Rejected.Pct, group=1, color="Claims ignored by Ombudsman")))
complaint.graph <- complaint.graph + theme(axis.text.x=element_text(angle=270, size=15))
complaint.graph
complaint.graph <- complaint.graph + scale_colour_manual(name='', values=c("Claims ignored by Ombudsman"="black"))
complaint.graph
source('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "1life-hp.csv")
source('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=Old+Mutual&company=67&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "oldmutual-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Old+Mutual&company=67&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "oldmutual-hp.csv")
source('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=Old+Mutual&company=67&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "oldmutual-hp.csv")
View(ombud)
write.hp.csv("http://hellopeter.com/search-reports?company_name=Hollard+Insurance&company=202&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "hollard-hp.csv")
source('~/Coursera/Playground/HelloPeter.R')
View(ombud)
write.hp.csv("http://hellopeter.com/search-reports?company_name=Sanlam&company=342&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "sanlam-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Liberty+Life&company=47&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "liberty-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Metropolitan+Life&company=1233&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "metropolitan-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Clientele+Life&company=945&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "clientele-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Discovery+Life&company=688496&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "discoverylife-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Discovery+Insure&company=772353&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "discoveryinsure-hp.csv")
Q
write.hp.csv("http://hellopeter.com/search-reports?company_name=Momentum&company=204&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "momentum-hp.csv")
source('~/Coursera/Playground/life-insurance-analysis.R')
sacsi <- read.sacsi()
View(sacsi)
##
rm(blanks)
rm(liberty)
rm(comp)
rm(complaint.graph)
rm(n.samp)
rm(samp)
rm(sampleTimes)
rm(split.name)
rm(onelife)
rm(reviews)
rm(competitors)
rm(ombud)
rm(sacsi)
rm(top.complaints)
rm(top.settlements)
rm(wkd)
rm(g)
rm(glob)
rm(mis)
source('~/Coursera/Playground/life-insurance-analysis.R')
hellopeter <- read.hellopeter()
liberty <- read.csv("liberty-hp.csv", stringsAsFactors = FALSE)
View(liberty)
liberty <- read.csv("hellopeter-full.csv", stringsAsFactors = FALSE)
debugSource('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=21&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "1life-test.csv")
debugSource('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=21&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "1life-test.csv")
View(liberty)
liberty <- read.csv("liberty-hp.csv", stringsAsFactors = FALSE)
View(liberty)
View(liberty)
source('~/Coursera/Playground/HelloPeter.R')
write.hp.csv("http://hellopeter.com/search-reports?company_name=1Life&company=806&respond=1&keyword_adv=&industry=21&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "hellopeter/1life-hp.csv")
write.hp.csv("hhttp://hellopeter.com/search-reports?company_name=Momentum&company=204&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "hellopeter/momentum-hp.csv")
write.hp.csv("http://hellopeter.com/search-reports?company_name=Momentum&company=204&respond=1&keyword_adv=&industry=0&country=168&area=&since=all&datefrom=&dateto=&user=&advsearch=Submit", "hellopeter/momentum-hp.csv")
source('~/Coursera/Playground/life-insurance-analysis.R')
profiles <- create.insurance.profiles()
warnings()
View(profiles)
correlation <- cor(profiles$sacsi, profiles$sacsi.nps)
correlation
?cor
correlation <- cor(profiles$sacsi, profiles$sacsi.nps, na.rm= TRUE)
complete.profiles <- profiles[complete.cases(profiles)]
correlation <- cor(complete.profiles$sacsi, complete.profiles$sacsi.nps)
correlation
library(ggplot2)
qplot(sacsi, sacsi.nps, data=complete.profiles)
View(complete.profiles)
complete.profiles <- profiles[complete.cases(profiles),]
qplot(sacsi, sacsi.nps, data=complete.profiles)
qplot(sacsi, sacsi.nps, data=profiles)
qplot(name, engage.count, data=complete.profiles)
?qplot
qplot(name, engage.count, data=complete.profiles, geom="histogram")
qplot(name, engage.count, data=complete.profiles, geom="histogram", stat="identity")
qplot(name, engage.count, data=complete.profiles, geom="histogram", stat="identity", colour=names)
qplot(name, engage.count, data=complete.profiles, geom="histogram", stat="identity", colour=name)
qplot(name, engage.count, data=complete.profiles, geom="histogram", stat="identity", fill)=name)
qplot(name, engage.count, data=complete.profiles, geom="histogram", stat="identity", fill=name)
qplot(name, engage.count, data=profiles, geom="histogram", stat="identity", fill=name)
qplot(name, c(engage.count, engage.negative), data=profiles, geom="histogram", stat="identity", fill=name)
qplot(c(name, name), c(engage.count, engage.negative), data=profiles, geom="histogram", stat="identity", fill=name)
qplot(name, engage.count, data=profiles, geom="histogram", stat="identity", fill=name)
qplot(name, engage.positive, data=profiles, geom="histogram", stat="identity", fill=name)
qplot(name, engage.negative, data=profiles, geom="histogram", stat="identity", fill=name)
q <- qplot(name, engage.negative, data=profiles, geom="histogram", stat="identity", fill=name)
q <- q + qplot(name, engage.count, data=profiles)
q <- ggplot(profiles, aes(x=name, y=engage.count, fill=name))
q
q <- q + qplot(name, engage.count, data=profiles) + geom_bar(stat="identity")
q <- ggplot(profiles, aes(x=name, y=engage.count, fill=name)) + geom_bar(stat="identity")
q
q <- q + geom_line(aes(x=name, y=engage.negative))
q
q <- q + geom_line(aes(x=name, y=engage.negative, group=1, color="Negative"))
q
q <- q + geom_line(aes(x=name, y=engage.negative, group=1))
q
q <- q + geom_point(aes(x=name, y=engage.negative))
q
View(profiles)
q <- q + geom_point(aes(x=name, y=ave.polarity))
q
q <- q + geom_point(aes(x=name, y=ave.polarity*100))
q
q <- q + geom_point(aes(x=name, y=ave.polarity*1000))
q
correlation <-  cor.test(profiles$sacsi.nps, profiles$sacsi)
str(correlation)
correlation
nps.correlation <- cor.test(profiles$sacsi.nps, profiles$orange.nps)
nps.correlation
sentiment.corr <- cor.test(profiles$sacsi, profiles$ave.polarity)
sentiment.corr
sentiment.corr <- cor.test(profiles$sacsi.tcf, profiles$ave.polarity)
sentiment.corr
sentiment.corr <- cor.test(profiles$sacsi.nps, profiles$ave.polarity)
sentiment.corr
library(psych)
correlations <- corr.test(profiles)
nameless <- subset(profiles, -c(Name,name))
nameless <- subset(profiles, select=-c(name, Name))
corrs <- corr.test(profiles)
corrs <- corr.test(nameless)
corrs
high <- corrs[corrs$p <= 0.05,]
high <- corrs[corrs$p <= 0.05]
high
high <- corrs$p[corrs$p <= 0.05]
high
high <- corrs[corrs$p <= 0.05]
high
dataset <- profiles
all.corrs  <- corr.test(dataset)
all.corrs  <- corr.test(nameless)
signif.corrs <- corrs$p <= 0.05
p <- corrs$p[signif.corrs]
names(p) <- names(corrs$p)[signif.corrs]
p
attr(p, "names") <- attr(corrs$p, "names")[signif.corrs]
attr(p, "names") <- attr(corrs$p, "names")
signif.corrs <- all.corrs$p <= 0.05
p <- all.corrs$p[signif.corrs]
#names(p) <- names(corrs$p)[signif.corrs]
attr(p, "names") <- attr(corrs$p, "names")
str(all.corrs)
attr(all.corrs$p, "dimnames")
str(all.corrs$p)
class(all.corrs$p)
all.corrs$p <= 0.05
class(all.corrs$p <= 0.05)
class(signif.corrs)
class(p)
p.sub <- subset(all.corrs, signif.corrs)
class(p.sub)
str(p.sub)
p.sub <- subset(all.corrs$p, signif.corrs)
p.sub <- all.corrs$p[rowSums(signif.corrs) > 0, colSums(signif.corrs) > 0]
class(p.sub)
str(p.sub)
p.df <- as.data.frame(all.corrs$p)
str(p.df)
View(p.df)
source('~/Coursera/Playground/life-insurance-analysis.R')
profiles <- create.insurance.profiles()
warnings()
dataset <- profiles
library(ggplot2)
q <- ggplot(dataset, aes(x=name, y=engage.count, fill=name)) + geom_bar(stat="identity")
q <- q + geom_point(aes(x=name, y=ave.polarity*1000))
q
View(profiles)
View(complete.profiles)
View(profiles)
probability.df <- as.data.frame(all.corrs)
probability.df <- as.data.frame(all.corrs$p)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
}
View(probability.df)
View(probability.df)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
probability.df[probability.df[,i] == 0,i] <- NA
}
probability.df <- as.data.frame(all.corrs$p)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
probability.df[probability.df[,i] == 0,i] <- NA
}
probability.df <- as.data.frame(all.corrs$p)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
#probability.df[probability.df[,i] == 0,i] <- NA
}
probability.df <- as.data.frame(all.corrs$p)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
probability.df[!is.na(probability.df[,i]) & probability.df[,i] == 0,i] <- NA
}
source('~/Coursera/Playground/life-insurance-analysis.R')
profiles <- create.insurance.profiles()
outlier(profiles)
library(psych)
outlier(profiles)
dataset <- profiles
nameless <- subset(dataset, select =  -c(name, Name))
## perform multi correlation
all.corrs  <- corr.test(nameless)
outlier(nameless)
probability.df <- as.data.frame(all.corrs$p)
for(i in 1:29)
{
probability.df[probability.df[,i] > 0.05,i] <- NA
probability.df[!is.na(probability.df[,i]) & probability.df[,i] == 0,i] <- NA
## Ombudsman rejected cases
rejected.corr <- probability.df["Cases.Rejected.Pct", !is.na(probability.df[,i])]
}
View(rejected.corr)
rejected.corr <- probability.df["Cases.Rejected.Pct", c("perceived.value", "sacsi.tcf", "first.call.resolution")]
View(rejected.corr)
coeff.df <- as.data.frame(all.corrs$r)
rejected.corr <- coeff.df$Cases.Rejected.Pct
rejected.corr <- coeff.df["Cases.Rejected.Pct", c("perceived.value", "sacsi.tcf", "first.call.resolution")]
View(rejected.corr)
rejected.p <- probability.df["Cases.Rejected.Pct", c("perceived.value", "sacsi.tcf", "first.call.resolution")]
rejected.corr <- coeff.df["Cases.Rejected.Pct", c("perceived.value", "sacsi.tcf", "first.call.resolution")]
View(rejected.p)
View(coeff.df)
View(profiles)
View(complete.profiles)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
View(coeff.df)
View(complete.profiles)
source('~/ExData_Plotting1/plot1.R')
getwd()
source('~/ExData_Plotting1/plot1.R')
source('~/ExData_Plotting1/plot2.R')
View(elec)
summary(elec)
2880/2
1440/24
?par
str(elec)
## Plot 2
lines(elec$Date, elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
summary(elec$Global_active_power)
lines(elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Date, elec$Global_active_power, type="n")
lines(elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Date, elec$Global_active_power, type="n")
lines(elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec, type="n")
plot(elec)
lines(elec$Date, elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Global_active_power)
lines(elec$Date, elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Global_active_power, type="n")
plot(elec$Global_active_power, type="n")
lines(elec$Date, elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Date, type="n")
lines(elec$Date, elec$Global_active_power, xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Date, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Date, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = "")
lines(elec$Global_active_power, elec$Date)
View(elec)
source('~/ExData_Plotting1/plot2.R')
plot(elec$Global_active_power, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = "")
lines(elec$Global_active_power, elec$Time)
View(elec)
paste(elec$Date, elec$Time)[1]
elec <- read.table("household_power_consumption.txt", header = TRUE, sep = ";", na.strings = "?", colClasses = c("character", "character", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
View(elec)
paste(elec$Date, elec$Time)[1]
strptime(paste(elec$Date, elec$Time)[1])
strptime(paste(elec$Date, elec$Time)[1], format="%d/%m/%Y %H:%M:%S")
elec$Date <- as.Date(elec$Date, format = "%d/%m/%Y")
elec$Time <- strptime(paste(elec$Date, elec$Time), format = "%d/%m/%Y %H:%M:%S")
View(elec)
source('~/ExData_Plotting1/plot2.R')
View(elec)
class(elec$Time)
summary(elec$Time)
elec$Time
plot(elec$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", main = "")
lines(elec$Global_active_power, elec$Time)
plot(elec$Global_active_power, elec$Time, type="l", xlab="", ylab="Global Active Power (kilowatts)", main = "")
plot(elec$Time, elec$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", main = "")
dev.copy(png, filename="Plot2.png")
dev.off()
with(elec, plot(Time, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = ""))
with(elec, plot(Time, Global_active_power, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = ""))
with(elec$Sub_metering_1, lines(Time))
with(elec$Sub_metering_1, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_2, col="blue"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, plot(Time, Sub_metering_3, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
## Plot 3
with(elec, plot(Time, Sub_metering_1, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=3, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=4, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=5, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=2, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=6, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=7, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=8, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), pch=9, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## write the plot to PNG file
legend("topright", col=c("black", "red", "blue"), pch=10, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
with(elec, plot(Time, Sub_metering_1, type="n", xlab="", ylab="Global Active Power (kilowatts)", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
legend("topright", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## write the plot to PNG file
dev.copy(png, filename="Plot3.png")
with(elec, plot(Time, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
legend("topright", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## write the plot to PNG file
dev.copy(png, filename="Plot3.png")
dev.off()
par(mfcol = c(2,2))
## plot global active power line graph
plot(elec$Time, elec$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", main = "")
## plot sub-metering line graph
with(elec, plot(Time, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
legend("topright", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
str(elec)
plot(elec$Time, elec$Voltage, type="l", ylab = "Voltage")
plot(elec$Time, elec$Global_reactive_power, type="l", xlab="", main = "")
source('~/ExData_Plotting1/plot4.R')
legend("top", bty="n", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
par(mfcol = c(2,2))
## plot global active power line graph
plot(elec$Time, elec$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)", main = "")
## plot sub-metering line graph
with(elec, plot(Time, Sub_metering_1, type="n", xlab="", ylab="Energy sub metering", main = ""))
with(elec, lines(Time, Sub_metering_1))
with(elec, lines(Time, Sub_metering_2, col="red"))
with(elec, lines(Time, Sub_metering_3, col="blue"))
legend("top", bty="n", col=c("black", "red", "blue"), lty=1, legend=c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"))
## plot voltage line graph
plot(elec$Time, elec$Voltage, type="l", xlab="", ylab = "Voltage")
## plot reactive global power line graph
plot(elec$Time, elec$Global_reactive_power, type="l", xlab="", ylab="Global_reactive_power", main = "")
## write the plot to PNG file
dev.copy(png, filename="Plot4.png")
dev.off()
rm(elec)
qplot(steps, data=daily.steps, geom="histogram", fill="blue")
```{r, echo=FALSE}
library(ggplot2)
library(dplyr)
```
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
if(file.exists("activity.csv") == FALSE)
{
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity <- transform(activity, date = as.POSIXct(date, format="%F"))
```
## What is mean total number of steps taken per day?
```{r Histogram of total steps per day}
by.date <- group_by(activity, date)
daily.steps <- summarise(by.date, steps = sum(steps, na.rm = TRUE), mean = mean(steps, na.rm=TRUE))
qplot(steps, data=daily.steps, geom="histogram", fill="blue")
```
getwd()
setwd("D:/Users/Shiraz.Amod/git/RepData_PeerAssessment1")
```{r, echo=FALSE}
library(ggplot2)
library(dplyr)
```
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r}
if(file.exists("activity.csv") == FALSE)
{
unzip("activity.zip")
}
activity <- read.csv("activity.csv")
activity <- transform(activity, date = as.POSIXct(date, format="%F"))
```
## What is mean total number of steps taken per day?
```{r Histogram_of_total_steps_per_day}
by.date <- group_by(activity, date)
daily.steps <- summarise(by.date, steps = sum(steps, na.rm = TRUE), mean = mean(steps, na.rm=TRUE))
qplot(steps, data=daily.steps, geom="histogram", fill="blue")
```
qplot(steps, data=daily.steps, geom="histogram", col="blue")
qplot(steps, data=daily.steps, geom="histogram")
daily.steps <- summarise(by.date, steps = sum(steps, na.rm = TRUE), mean = mean(steps, na.rm=TRUE), median = median(steps, na.rm=TRUE))
View(daily.steps)
daily.steps <- summarise(by.date, total.steps = sum(steps, na.rm = TRUE), mean = mean(steps, na.rm=TRUE), median = median(steps, na.rm=TRUE))
qplot(total.steps, data=daily.steps, geom="histogram")
View(daily.steps)
mean(daily.steps$total.steps)
mean(daily.steps$total.steps, na.rm = TRUE)
by.interval <- group_by(activity, interval)
interval.activity <- summarise(by.interval, mean.steps = mean(steps))
qplot(interval, mean.steps, data=interval.activity, type="l")
View(interval.activity)
interval.activity <- summarise(by.interval, mean.steps = mean(steps, na.rm=TRUE))
qplot(interval, mean.steps, data=interval.activity, type="l")
qplot(interval, mean.steps, data=interval.activity, geom="line")
qplot(interval, mean.steps, data=interval.activity, geom="line") + labs(title = "Time series of the average steps taken in each 5 minute interval")
max(interval.activity$mean.steps)
pmax(interval.activity$mean.steps)
max(interval.activity$mean.steps)
interval.activity[interval.activity$mean.steps == max(interval.activity$mean.steps), interval]
View(interval.activity)
interval.activity[interval.activity$mean.steps == max(interval.activity$mean.steps), "interval"]
missing.values <- is.na(activity)
missing.values <- activity[is.na(activity),]
nrow(missing.values)
